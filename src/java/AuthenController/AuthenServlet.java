/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package AuthenController;

import dal.UserDAO;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.UUID;
import model.SendMailOK;
import model.User;

/**
 *
 * @author FPT
 */
public class AuthenServlet extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet CourseDetailAdminServlet</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet CourseDetailAdminServlet at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    private UserDAO userDAO = new UserDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        String action = request.getParameter("action") != null ? request.getParameter("action") : "";

        try {
            switch (action) {
                case "login":
                    request.getRequestDispatcher("login.jsp").forward(request, response);
                    break;
                case "logout":
                try {
                    logout(request, response);
                } catch (IOException ex) {
                    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                }
                break;
                case "editprofile":
                    request.getRequestDispatcher("editProfile.jsp").forward(request, response); // ‚úÖ Ch·ªâ hi·ªÉn th·ªã form
                    break;
                case "changepassword":
                    request.getRequestDispatcher("changePassword.jsp").forward(request, response); // ‚úÖ S·ª≠a t·∫°i ƒë√¢y
                    break;
                case "resetpassword":
                    request.getRequestDispatcher("resetPassword.jsp").forward(request, response); // ‚úÖ S·ª≠a t·∫°i ƒë√¢y
                    break;
                case "verify":
                    verifyEmail(request, response);
                    break;

                default:
                    response.sendRedirect("home");
            }
        } catch (Exception e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        String action = request.getParameter("action") != null ? request.getParameter("action") : "";

        try {
            switch (action) {
                case "login":
                    login(request, response);
                    break;
                case "editprofile":
                    updateProfile(request, response);
                    break;
                case "changepassword":
                    changePassword(request, response);
                    break;
                case "resetpassword":
                    String nextPage = resetPassword(request, response);
                    if (nextPage != null) {
                        request.getRequestDispatcher(nextPage).forward(request, response);
                    }
                    break;

                default:
                    response.sendRedirect("home");
            }
        } catch (Exception e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }
    }

    private void login(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");

        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String rememberMe = request.getParameter("remember_me");

        try {
            User user = userDAO.login(email, password);

            if (user == null) {
                request.setAttribute("notification", "‚ùå Sai email ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
                request.getRequestDispatcher("login.jsp").forward(request, response);
                return;
            }

            if (!user.isStatus()) {
                request.setAttribute("notification", "‚ö†Ô∏è T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng ki·ªÉm tra email.");
                request.getRequestDispatcher("login.jsp").forward(request, response);
                return;
            }

            if (!user.isIsActive()) {
                request.setAttribute("notification", "‚ö†Ô∏è G√≥i d·ªãch v·ª• c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng ch·ªçn g√≥i ho·∫∑c ch·ªù x√°c nh·∫≠n.");
                request.getRequestDispatcher("login.jsp").forward(request, response);
                return;
            }

            // L∆∞u user v√†o session
            HttpSession session = request.getSession();
            session.setAttribute("user", user);

            // X·ª≠ l√Ω remember me
            if (rememberMe != null) {
                Cookie cEmail = new Cookie("cEmail", email);
                Cookie cPassword = new Cookie("cPassword", password);
                cEmail.setMaxAge(60 * 60 * 24 * 30 * 6);
                cPassword.setMaxAge(60 * 60 * 24 * 30 * 6);
                response.addCookie(cEmail);
                response.addCookie(cPassword);
            }

            System.out.println("ƒêƒÉng nh·∫≠p th√†nh c√¥ng: " + user.getFullname() + " | Vai tr√≤: " + user.getRoleId());

            // X√°c ƒë·ªãnh URL chuy·ªÉn h∆∞·ªõng
            String redirectUrl;

            // ∆Øu ti√™n tham s·ªë redirect trong URL
            String redirectParam = request.getParameter("redirect");
            if (redirectParam != null && !redirectParam.isEmpty()) {
                redirectUrl = redirectParam;
            } // N·∫øu kh√¥ng c√≥ tham s·ªë redirect, ki·ªÉm tra role
            else {
                // Th√†nh:
                if (user.getRoleId() == 2 || user.getRoleId() == 3) {
                    redirectUrl = "admin";
                } else {
                    redirectUrl = "home";
                }
            }

            // Th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng
            response.sendRedirect(redirectUrl);

        } catch (SQLException ex) {
            request.setAttribute("error", "üö® L·ªói h·ªá th·ªëng: " + ex.getMessage());
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }

    private void logout(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        HttpSession session = request.getSession(false);

        if (session != null) {
            session.invalidate();
        }

        response.sendRedirect("home");
    }

    private String updateProfile(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");

        HttpSession session = request.getSession();
        User currentUser = (User) session.getAttribute("user");

        if (currentUser == null) {
            return "login.jsp";
        }

        String fullname = request.getParameter("fullname");
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");

        // Ki·ªÉm tra c√°c tham s·ªë c√≥ null kh√¥ng
        if (fullname == null || phone == null || address == null) {
            request.setAttribute("notification", "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt");
            return "editProfile.jsp"; // <- t√™n file n√™n vi·∫øt th∆∞·ªùng
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá
        if (!phone.matches("^(032|033|034|035|036|037|038|039|096|097|098|086|083|084|085|081|082|088|091|094|070|079|077|076|078|090|093|089|056|058|092|059|099)[0-9]{7}$")) {
            request.setAttribute("notification", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá");
            return "editProfile.jsp";
        }

        // C·∫≠p nh·∫≠t ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng
        User updatedUser = new User();
        updatedUser.setId(currentUser.getId());
        updatedUser.setEmail(currentUser.getEmail());
        updatedUser.setPassword(currentUser.getPassword());
        updatedUser.setFullname(fullname);
        updatedUser.setPhone(phone);
        updatedUser.setAddress(address);
        updatedUser.setRoleId(currentUser.getRoleId());
        updatedUser.setStatus(currentUser.isStatus());

        UserDAO userDAO = new UserDAO(); // ‚úÖ ƒê·∫£m b·∫£o ƒë∆∞·ª£c kh·ªüi t·∫°o

        try {
            if (userDAO.updateProfile(updatedUser)) {
                session.setAttribute("user", updatedUser);
                request.setAttribute("notification", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng");
            } else {
                request.setAttribute("notification", "C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i");
            }
        } catch (SQLException ex) {
            request.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
        }

        return "editProfile.jsp"; // ‚úÖ Vi·∫øt ƒë√∫ng t√™n file JSP
    }

    private String changePassword(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        HttpSession session = request.getSession();
        User currentUser = (User) session.getAttribute("user");

        if (currentUser == null) {
            return "login.jsp";
        }

        String oldPassword = request.getParameter("oldPassword");
        String newPassword = request.getParameter("newPassword");
        String confirmPassword = request.getParameter("confirmPassword");

        // Validate inputs
        if (!newPassword.equals(confirmPassword)) {
            request.setAttribute("notification", "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp");
            return "changePassword.jsp";
        }

        try {
            // Verify old password
            User user = userDAO.login(currentUser.getEmail(), oldPassword);
            if (user == null) {
                request.setAttribute("notification", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng");
                return "changePassword.jsp";
            }
// Validate inputs
            if (!newPassword.equals(confirmPassword)) {
                request.setAttribute("notification", "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp");
                return "changePassword.jsp";
            }

            if (newPassword.equals(oldPassword)) {
                request.setAttribute("notification", "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©");
                return "changePassword.jsp";
            }

            if (!isValidPassword(newPassword)) {
                request.setAttribute("notification", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë");
                return "changePassword.jsp";
            }

            if (userDAO.changePassword(currentUser.getId(), newPassword)) {
                currentUser.setPassword(newPassword);
                session.setAttribute("user", currentUser);
                session.invalidate(); // b·∫Øt bu·ªôc ƒëƒÉng nh·∫≠p l·∫°i

                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn changepassword.jsp v√† g·∫Øn c·ªù th√†nh c√¥ng
                request.setAttribute("success", true);
                request.setAttribute("notification", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i sau v√†i gi√¢y...");
                return "changePassword.jsp";

            } else {
                request.setAttribute("notification", "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
            }

            return "changePassword.jsp";
        } catch (SQLException ex) {
            request.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
            return "changePassword.jsp";
        }
    }

    private boolean isValidPassword(String password) {
        // V√≠ d·ª•: √≠t nh·∫•t 8 k√Ω t·ª±, 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng, 1 s·ªë
        String regex = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$";
        return password != null && password.matches(regex);
    }

    private String resetPassword(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        HttpSession session = request.getSession(); // <-- ph·∫£i khai b√°o session ·ªü ƒë√¢y

        String email = request.getParameter("email");

        try {
            if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
                request.setAttribute("error", "‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá");
                return "resetPassword.jsp";
            }
            User user = userDAO.getUserByEmail(email);
            if (user == null) {
                request.setAttribute("error", "‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng");
                return "resetPassword.jsp";
            }

            // T·∫°o token reset password (h·∫øt h·∫°n sau 24h)
            String token = UUID.randomUUID().toString();
            userDAO.saveResetToken(email, token); // B·∫°n c·∫ßn c√≥ method n√†y

            String resetLink = request.getScheme() + "://"
                    + request.getServerName()
                    + (request.getServerPort() != 80 && request.getServerPort() != 443
                    ? ":" + request.getServerPort() : "")
                    + request.getContextPath()
                    + "/authen?action=changepassword&token=" + token;

            String emailBody = "<!DOCTYPE html>"
                    + "<html lang='vi'>"
                    + "<head>"
                    + "<meta charset='UTF-8'>"
                    + "<style>"
                    + "body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #fffaf4; color: #333; padding: 20px; }"
                    + ".container { max-width: 600px; margin: auto; background-color: #fff; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); padding: 20px; }"
                    + "h2 { color: #ff6600; }"
                    + ".button { display: inline-block; background-color: #ff9966; color: white; padding: 10px 20px; border-radius: 8px; text-decoration: none; font-weight: bold; }"
                    + ".footer { font-size: 13px; color: #888; margin-top: 30px; line-height: 1.6; }"
                    + ".footer strong { color: #555; }"
                    + "</style>"
                    + "</head>"
                    + "<body>"
                    + "<div class='container'>"
                    + "<h2>üîê Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>"
                    + "<p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n PetTech c·ªßa b·∫°n.</p>"
                    + "<p>Vui l√≤ng nh·∫•n v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:</p>"
                    + "<p><a class='button' href='" + resetLink + "'>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a></p>"
                    + "<p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, h√£y b·ªè qua email n√†y.</p>"
                    + "<div class='footer'>"
                    + "<strong>‚ù§Ô∏è PetTech Team</strong><br>"
                    + "N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i nh√©! üß°<br>"
                    + "üìû H·ªó tr·ª£: <a href='tel:0352138596'>0352 138 596</a><br>"
                    + "ƒê·ªãa ch·ªâ: Khu C√¥ng ngh·ªá cao H√≤a L·∫°c, Th·∫°ch Th·∫•t, H√† N·ªôi"
                    + "</div>"
                    + "</div>"
                    + "</body>"
                    + "</html>";

            SendMailOK.send(
                    "smtp.gmail.com",
                    email,
                    "vdc120403@gmail.com",
                    "ednn nwbo zbyq gahs",
                    "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u PetTech",
                    emailBody
            );

            // Th√™m th√¥ng b√°o th√†nh c√¥ng v√†o session
            session.setAttribute("success", "‚úÖ Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n.");
            response.sendRedirect("login.jsp"); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang login
            return null;

        } catch (SQLException ex) {
            request.setAttribute("error", "üö® L·ªói h·ªá th·ªëng: " + ex.getMessage());
            return "resetPassword.jsp";
        } catch (Exception e) {
            request.setAttribute("error", "üö® G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
            return "resetPassword.jsp";
        }
    }

    private void verifyEmail(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        String token = request.getParameter("token");
        HttpSession session = request.getSession();

        try {
            if (userDAO.verifyUser(token)) {
                session.setAttribute("notification", "X√°c th·ª±c email th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.");
            } else {
                session.setAttribute("notification", "Li√™n k·∫øt x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
            }

            response.sendRedirect("login.jsp");
        } catch (SQLException ex) {
            session.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
            response.sendRedirect("login.jsp");
        }
    }

    private String generateRandomPassword(int length) {

        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < length; i++) {
            int index = (int) (Math.random() * chars.length());
            sb.append(chars.charAt(index));
        }

        return sb.toString();
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
