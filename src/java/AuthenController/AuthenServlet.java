/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package AuthenController;

import dal.PackageDAO;
import dal.UserDAO;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.sql.SQLException;
import java.util.List;
import java.util.UUID;
import model.SendMailOK;
import model.ServicePackage;
import model.User;

/**
 *
 * @author FPT
 */
public class AuthenServlet extends HttpServlet {

    private UserDAO userDAO = new UserDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action") != null
                ? request.getParameter("action")
                : "";

        String url;
        switch (action) {
            case "login":
                url = "login.jsp";
                break;
            case "logout":
                url = logout(request, response);
                break;
            case "signup":
                url = "signup.jsp";
                break;
            case "editprofile":
                url = "editprofile.jsp";
                break;
            case "changepassword":
                url = "changepassword.jsp";
                break;
            case "resetpassword":
                url = "resetpassword.jsp";
                break;
            case "verify":
                url = verifyEmail(request, response);
                break;
            default:
                url = "Home.jsp";
        }

        request.getRequestDispatcher(url).forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action") != null
                ? request.getParameter("action")
                : "";

        String url;
        switch (action) {
            case "login":
                url = login(request, response);
                break;
            case "register":
                url = register(request, response);
                break;
            case "update":
                url = updateProfile(request, response);
                break;
            case "changepassword":
                url = changePassword(request, response);
                break;
            case "resetpassword":
                url = resetPassword(request, response);
                break;
            default:
                url = "Home.jsp";
        }

        request.getRequestDispatcher(url).forward(request, response);
    }

    private String login(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String email = request.getParameter("email");
        String password = request.getParameter("password");

        try {
            User user = userDAO.login(email, password);

            if (user == null) {
                request.setAttribute("notification", "‚ùå Sai email ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.");
                return "login.jsp";
            }

            if (!user.isStatus()) {
                request.setAttribute("notification", "‚ö†Ô∏è T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng ki·ªÉm tra email.");
                return "login.jsp";
            }

            // L∆∞u user v√†o session
            HttpSession session = request.getSession();
            session.setAttribute("user", user);

            // In debug ra console (tu·ª≥ m√¥i tr∆∞·ªùng)
            System.out.println("ƒêƒÉng nh·∫≠p th√†nh c√¥ng: " + user.getFullname() + " | Vai tr√≤: " + user.getRoleId());

            // Chuy·ªÉn h∆∞·ªõng theo vai tr√≤
            switch (user.getRoleId()) {
                case 3:
                    return "admin-dashboard.jsp"; // Trang admin
                case 2:
                    return "staff-dashboard.jsp"; // Trang nh√¢n vi√™n
                default:
                    return "Home.jsp"; // Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            request.setAttribute("error", "üö® L·ªói h·ªá th·ªëng: " + ex.getMessage());
            return "login.jsp";
        }
    }

    private String logout(HttpServletRequest request, HttpServletResponse response) {
        request.getSession().removeAttribute("user");
        return "Home.jsp";
    }

    private String register(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");

        String url;
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String fullname = request.getParameter("fullname");
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");
        String confirmPassword = request.getParameter("confirm_password");
        String packageIdStr = request.getParameter("packageId");

        int packageId = 1; // M·∫∑c ƒë·ªãnh l√† g√≥i mi·ªÖn ph√≠
        try {
            if (packageIdStr != null && !packageIdStr.isEmpty()) {
                packageId = Integer.parseInt(packageIdStr);
            }
        } catch (NumberFormatException e) {
            packageId = 1;
        }

        try {
            // Load danh s√°ch g√≥i ƒë·ªÉ gi·ªØ l·∫°i hi·ªÉn th·ªã n·∫øu l·ªói
            PackageDAO spDAO = new PackageDAO();
            List<ServicePackage> packages = spDAO.getAllPackages();
            request.setAttribute("packages", packages);

            // Validate th√¥ng tin ng∆∞·ªùi d√πng
            if (!password.equals(confirmPassword)) {
                request.setAttribute("notification", "Nh·∫≠p l·∫°i m·∫≠t kh·∫©u kh√¥ng gi·ªëng nhau");
                return "signup.jsp";
            }

            if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
                request.setAttribute("notification", "ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá");
                return "signup.jsp";
            }

            if (!phone.matches("^(032|033|034|035|036|037|038|039|096|097|098|086|083|084|085|081|082|088|091|094|070|079|077|076|078|090|093|089|056|058|092|059|099)[0-9]{7}$")) {
                request.setAttribute("notification", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá");
                return "signup.jsp";
            }

            if (password.length() <= 8 || password.length() > 32) {
                request.setAttribute("notification", "M·∫≠t kh·∫©u ph·∫£i t·ª´ 8 ƒë·∫øn 32 k√Ω t·ª±");
                return "signup.jsp";
            }

            if (userDAO.checkEmailExists(email.toLowerCase())) {
                request.setAttribute("notification", "Email ƒë√£ t·ªìn t·∫°i");
                return "signup.jsp";
            }

            // T·∫°o user v√† g·ª≠i email x√°c th·ª±c
            String token = UUID.randomUUID().toString();
            User newUser = new User();
            newUser.setEmail(email);
            newUser.setPassword(password);
            newUser.setFullname(fullname);
            newUser.setPhone(phone);
            newUser.setAddress(address);
            newUser.setRoleId(1); // user
            newUser.setStatus(false); // ch∆∞a k√≠ch ho·∫°t
            newUser.setVerificationToken(token);
            newUser.setServicePackageId(packageId);

            if (userDAO.register(newUser)) {
                String verificationLink = request.getScheme() + "://"
                        + request.getServerName() + ":"
                        + request.getServerPort()
                        + request.getContextPath()
                        + "/authen?action=verify&token=" + token;

                String emailBody = "Xin ch√†o " + fullname + ",<br><br>"
                        + "<span style='color: green;'>Vui l√≤ng x√°c minh ƒë·ªãa ch·ªâ email c·ªßa b·∫°n ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω t√†i kho·∫£n PetTech.</span><br><br>"
                        + "Nh·∫•p v√†o li√™n k·∫øt sau ƒë·ªÉ x√°c minh: <a href='" + verificationLink + "'>" + verificationLink + "</a><br><br>"
                        + "<span style='color: blue;'>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</span>";

                try {
                    SendMailOK.send(
                            "smtp.gmail.com",
                            email,
                            "vdc120403@gmail.com",
                            "ednn nwbo zbyq gahs", // m·∫≠t kh·∫©u ·ª©ng d·ª•ng
                            "X√°c minh email PetTech",
                            emailBody
                    );
                    request.setAttribute("notification", "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.");
                    url = "login.jsp";
                } catch (Exception e) {
                    e.printStackTrace();
                    request.setAttribute("notification", "ƒêƒÉng k√Ω th√†nh c√¥ng nh∆∞ng g·ª≠i email x√°c nh·∫≠n th·∫•t b·∫°i. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
                    url = "login.jsp";
                }

            } else {
                request.setAttribute("notification", "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
                url = "signup.jsp";
            }

        } catch (SQLException ex) {
            request.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
            url = "signup.jsp";
        }

        return url;
    }

    private String updateProfile(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");

        HttpSession session = request.getSession();
        User currentUser = (User) session.getAttribute("user");

        if (currentUser == null) {
            return "login.jsp";
        }

        String fullname = request.getParameter("fullname");
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá
        if (!phone.matches("^(032|033|034|035|036|037|038|039|096|097|098|086|083|084|085|081|082|088|091|094|070|079|077|076|078|090|093|089|056|058|092|059|099)[0-9]{7}$")) {
            request.setAttribute("notification", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá");
            return "editprofile.jsp";
        }

        // C·∫≠p nh·∫≠t ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng
        User updatedUser = new User();
        updatedUser.setId(currentUser.getId());
        updatedUser.setEmail(currentUser.getEmail());
        updatedUser.setPassword(currentUser.getPassword());
        updatedUser.setFullname(fullname);
        updatedUser.setPhone(phone);
        updatedUser.setAddress(address);
        updatedUser.setRoleId(currentUser.getRoleId());
        updatedUser.setStatus(currentUser.isStatus());

        try {
            if (userDAO.updateProfile(updatedUser)) {
                session.setAttribute("user", updatedUser);
                request.setAttribute("notification", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng");
            } else {
                request.setAttribute("notification", "C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i");
            }
            return "editprofile.jsp";
        } catch (SQLException ex) {
            request.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
            return "editprofile.jsp";
        }
    }

    private String changePassword(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        User currentUser = (User) session.getAttribute("user");

        if (currentUser == null) {
            return "login.jsp";
        }

        String oldPassword = request.getParameter("oldPassword");
        String newPassword = request.getParameter("newPassword");
        String confirmPassword = request.getParameter("confirmPassword");

        // Validate inputs
        if (!newPassword.equals(confirmPassword)) {
            request.setAttribute("notification", "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp");
            return "changepassword.jsp";
        }

        try {
            // Verify old password
            User user = userDAO.login(currentUser.getEmail(), oldPassword);
            if (user == null) {
                request.setAttribute("notification", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng");
                return "changepassword.jsp";
            }

            if (userDAO.changePassword(currentUser.getId(), newPassword)) {
                request.setAttribute("notification", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
                // Update session with new password
                currentUser.setPassword(newPassword);
                session.setAttribute("user", currentUser);
            } else {
                request.setAttribute("notification", "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
            }

            return "changepassword.jsp";
        } catch (SQLException ex) {
            request.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
            return "changepassword.jsp";
        }
    }

    private String resetPassword(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String email = request.getParameter("email");

        try {
            User user = userDAO.getUserByEmail(email);
            if (user == null) {
                request.setAttribute("notification", "Email kh√¥ng t·ªìn t·∫°i");
                return "resetpassword.jsp";
            }

            // T·∫°o token reset password (h·∫øt h·∫°n sau 24h)
            String resetToken = UUID.randomUUID().toString();
            userDAO.saveResetToken(email, resetToken);

            // T·∫°o link reset password
            String resetLink = request.getRequestURL().toString()
                    .replace(request.getServletPath(), "")
                    + "/authen?action=changepassword&token=" + resetToken;

            try {
                String emailBody = "Xin ch√†o " + user.getFullname() + ",<br><br>"
                        + "<span style='color: green;'>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n PetTech.</span><br><br>"
                        + "Vui l√≤ng nh·∫•p v√†o li√™n k·∫øt sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: <a href='" + resetLink + "'>" + resetLink + "</a><br><br>"
                        + "Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.<br><br>"
                        + "<span style='color: blue;'>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</span>";

                SendMailOK.send(
                        "smtp.gmail.com",
                        email,
                        "vdc120403@gmail.com", // Thay b·∫±ng email c·ªßa b·∫°n
                        "ednn nwbo zbyq gahs", // Thay b·∫±ng m·∫≠t kh·∫©u ·ª©ng d·ª•ng
                        "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u PetTech",
                        emailBody
                );

                request.setAttribute("notification", "Li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.");
            } catch (Exception e) {
                e.printStackTrace();
                request.setAttribute("notification", "G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
            }

            return "resetpassword.jsp";
        } catch (SQLException ex) {
            request.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
            return "resetpassword.jsp";
        }
    }

    private String verifyEmail(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String token = request.getParameter("token");

        try {
            if (userDAO.verifyUser(token)) {
                request.setAttribute("notification", "X√°c th·ª±c email th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.");
            } else {
                request.setAttribute("notification", "Li√™n k·∫øt x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
            }

            return "login.jsp";
        } catch (SQLException ex) {
            request.setAttribute("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage());
            return "login.jsp";
        }
    }

    private String generateRandomPassword(int length) {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < length; i++) {
            int index = (int) (Math.random() * chars.length());
            sb.append(chars.charAt(index));
        }

        return sb.toString();
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
