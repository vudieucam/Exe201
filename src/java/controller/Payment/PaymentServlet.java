/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.Payment;

import dal.PackageDAO;
import dal.UserDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.UUID;
import model.SendMailOK;
import model.ServicePackage;
import model.User;

public class PaymentServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "GET kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng POST.");
    }

    private PackageDAO packageDAO = new PackageDAO();
    private UserDAO userDAO = new UserDAO();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");
        String action = request.getParameter("action");
        String paymentMethod = request.getParameter("paymentMethod");
        String packageIdParam = request.getParameter("packageId");
        int packageId = 0;

        if (packageIdParam != null && !packageIdParam.trim().isEmpty()) {
            packageId = Integer.parseInt(packageIdParam);
        } else {
            request.setAttribute("error", "Thi·∫øu th√¥ng tin g√≥i d·ªãch v·ª•");
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }

        HttpSession session = request.getSession();

        try {
            ServicePackage pkg = packageDAO.getPackageById(packageId);

            if ("payAndRegister".equals(action)) {
                handleNewRegistrationPayment(request, response, session, pkg, paymentMethod);
            } else if ("upgrade".equals(action)) {
                handleUpgradePayment(request, response, session, pkg, paymentMethod);
            } else {
                session.setAttribute("error", "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá");
                response.sendRedirect("pricing.jsp");
            }
        } catch (SQLException e) {
            session.setAttribute("error", "L·ªói h·ªá th·ªëng: " + e.getMessage());
            response.sendRedirect("pricing.jsp");
        }
    }

    private void handleNewRegistrationPayment(HttpServletRequest request, HttpServletResponse response,
            HttpSession session, ServicePackage pkg, String paymentMethod)
            throws ServletException, IOException, SQLException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");

        User pendingUser = (User) session.getAttribute("pendingUser");

        if (pendingUser == null) {
            session.setAttribute("error", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω. Vui l√≤ng ƒëƒÉng k√Ω l·∫°i.");
            response.sendRedirect("signup.jsp");
            return;
        }

        String token = UUID.randomUUID().toString();
        pendingUser.setVerificationToken(token);
        pendingUser.setStatus(false);
        pendingUser.setRoleId(1);

        String confirmationCode = UUID.randomUUID().toString();

        boolean paymentSuccess = packageDAO.recordPayment(
                pendingUser.getId(), // Changed from null to pendingUser.getId()
                pkg.getId(),
                paymentMethod,
                pkg.getPrice(),
                confirmationCode
        );

        if (paymentSuccess) {
            boolean registerSuccess = userDAO.register(pendingUser);

            if (registerSuccess) {
                sendUpgradeEmail(request, pendingUser, pkg);

                session.removeAttribute("pendingUser");
                session.removeAttribute("oldEmail");
                session.removeAttribute("oldFullname");
                session.removeAttribute("oldPhone");

                session.setAttribute("successMessage", "ƒêƒÉng k√Ω v√† thanh to√°n th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.");
                session.setAttribute("pkg", pkg);
                session.setAttribute("paymentMethod", paymentMethod);
                response.sendRedirect("payment_success.jsp");
            } else {
                session.setAttribute("error", "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
                response.sendRedirect("signup.jsp?packageId=" + pkg.getId());
            }
        } else {
            session.setAttribute("error", "Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
            response.sendRedirect("payment.jsp?packageId=" + pkg.getId());
        }
    }

    private void handleUpgradePayment(HttpServletRequest request, HttpServletResponse response,
            HttpSession session, ServicePackage pkg, String paymentMethod)
            throws ServletException, IOException, SQLException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/html;charset=UTF-8");

        User user = (User) session.getAttribute("user");

        if (user == null) {
            session.setAttribute("error", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thanh to√°n");
            response.sendRedirect("login.jsp");
            return;
        }

        // Changed these checks since servicePackageId is int (primitive) and can't be null
        if (user.getServicePackageId() == pkg.getId()) {
            session.setAttribute("notification", "B·∫°n ƒë√£ ƒëƒÉng k√Ω g√≥i n√†y r·ªìi!");
            response.sendRedirect("pricing.jsp");
            return;
        }

        if (user.getServicePackageId() > pkg.getId()) {
            session.setAttribute("notification", "B·∫°n kh√¥ng th·ªÉ chuy·ªÉn xu·ªëng g√≥i th·∫•p h∆°n!");
            response.sendRedirect("pricing.jsp");
            return;
        }

        String confirmationCode = UUID.randomUUID().toString();

        boolean paymentSuccess = packageDAO.recordPayment(
                user.getId(),
                pkg.getId(),
                paymentMethod,
                pkg.getPrice(),
                confirmationCode
        );

        if (paymentSuccess) {
            boolean updateSuccess = packageDAO.registerPackage(user.getId(), pkg.getId());

            if (updateSuccess) {
                user.setServicePackageId(pkg.getId());
                session.setAttribute("user", user);

                sendUpgradeEmail(request, user, pkg);

                session.setAttribute("successMessage", "N√¢ng c·∫•p g√≥i d·ªãch v·ª• th√†nh c√¥ng!");
                session.setAttribute("pkg", pkg);
                session.setAttribute("paymentMethod", paymentMethod);
                response.sendRedirect("payment_success.jsp");
            } else {
                session.setAttribute("error", "N√¢ng c·∫•p g√≥i d·ªãch v·ª• th·∫•t b·∫°i. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.");
                response.sendRedirect("pricing.jsp");
            }
        } else {
            session.setAttribute("error", "Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
            response.sendRedirect("payment.jsp?packageId=" + pkg.getId());
        }
    }

    private void sendUpgradeEmail(HttpServletRequest request, User user, ServicePackage pkg) throws UnsupportedEncodingException {
        request.setCharacterEncoding("UTF-8");
        try {
            String emailBody = "<!DOCTYPE html>"
                    + "<html lang='vi'>"
                    + "<head><meta charset='UTF-8'><style>"
                    + "body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #fffaf4; color: #333; padding: 20px; }"
                    + ".container { max-width: 600px; margin: auto; background-color: #fff; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); padding: 20px; }"
                    + "h2 { color: #ff6600; }"
                    + ".footer { font-size: 13px; color: #888; margin-top: 30px; line-height: 1.6; }"
                    + "</style></head>"
                    + "<body><div class='container'>"
                    + "<h2>üê∂ N√¢ng c·∫•p g√≥i d·ªãch v·ª• th√†nh c√¥ng! üê±</h2>"
                    + "<p>Xin ch√†o <strong>" + user.getFullname() + "</strong>,</p>"
                    + "<p>C·∫£m ∆°n b·∫°n ƒë√£ n√¢ng c·∫•p l√™n <strong>g√≥i " + pkg.getName() + "</strong> v·ªõi s·ªë ti·ªÅn <strong>"
                    + pkg.getPrice().toString() + "‚Ç´</strong>.</p>"
                    + "<p>B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng m·ªõi ngay b√¢y gi·ªù!</p>"
                    + "<p>N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>"
                    + "<div class='footer'>"
                    + "<strong>üìû H·ªó tr·ª£:</strong> 0352 138 596<br>"
                    + "<strong>üìß Email:</strong> pettech@email.com<br><br>"
                    + "‚ù§Ô∏è PetTech Team"
                    + "</div></div></body></html>";

            SendMailOK.send(
                    "smtp.gmail.com",
                    user.getEmail(),
                    "vdc120403@gmail.com",
                    "ednn nwbo zbyq gahs",
                    "Th√¥ng b√°o n√¢ng c·∫•p g√≥i d·ªãch v·ª• PetTech",
                    emailBody
            );
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}